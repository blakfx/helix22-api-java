/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.blakfx.crypto;

public final class promiseStatusAndFlags_t {
  public final static promiseStatusAndFlags_t PROMISE_INVALID = new promiseStatusAndFlags_t("PROMISE_INVALID", -254);
  public final static promiseStatusAndFlags_t PROMISE_INFINITE = new promiseStatusAndFlags_t("PROMISE_INFINITE", -1);
  public final static promiseStatusAndFlags_t PROMISE_COMPLETE = new promiseStatusAndFlags_t("PROMISE_COMPLETE", 0x0001);
  public final static promiseStatusAndFlags_t PROMISE_DESTROY = new promiseStatusAndFlags_t("PROMISE_DESTROY", 0x0002);
  public final static promiseStatusAndFlags_t PROMISE_DATA_AVAILABLE = new promiseStatusAndFlags_t("PROMISE_DATA_AVAILABLE", 0x0004);
  public final static promiseStatusAndFlags_t PROMISE_EVENT = new promiseStatusAndFlags_t("PROMISE_EVENT", 0x0008);
  public final static promiseStatusAndFlags_t PROMISE_USER_EVENT = new promiseStatusAndFlags_t("PROMISE_USER_EVENT", 0x0010);
  public final static promiseStatusAndFlags_t PROMISE_RESULT_ERROR = new promiseStatusAndFlags_t("PROMISE_RESULT_ERROR", 0x0020);
  public final static promiseStatusAndFlags_t PROMISE_MEMORY_ALLOCATED = new promiseStatusAndFlags_t("PROMISE_MEMORY_ALLOCATED", 0x0040);
  public final static promiseStatusAndFlags_t PROMISE_MEMORY_RELEASING = new promiseStatusAndFlags_t("PROMISE_MEMORY_RELEASING", 0x0080);
  public final static promiseStatusAndFlags_t PROMISE_MEMORY_POST_RELEASED_ID = new promiseStatusAndFlags_t("PROMISE_MEMORY_POST_RELEASED_ID", 0x0100);
  public final static promiseStatusAndFlags_t PROMISE_ALLOW_RECURSIVE_EVENTS = new promiseStatusAndFlags_t("PROMISE_ALLOW_RECURSIVE_EVENTS", 0x1000);
  public final static promiseStatusAndFlags_t PROMISE_NO_STATUS = new promiseStatusAndFlags_t("PROMISE_NO_STATUS", 0x2000);
  public final static promiseStatusAndFlags_t PROMISE_WAIT_STATUS = new promiseStatusAndFlags_t("PROMISE_WAIT_STATUS", 0x4000);
  public final static promiseStatusAndFlags_t PROMISE_ERROR_UNDEFINED = new promiseStatusAndFlags_t("PROMISE_ERROR_UNDEFINED", 0x8000);

  public final int swigValue() {
    return swigValue;
  }

  public String toString() {
    return swigName;
  }

  public static promiseStatusAndFlags_t swigToEnum(int swigValue) {
    if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
      return swigValues[swigValue];
    for (int i = 0; i < swigValues.length; i++)
      if (swigValues[i].swigValue == swigValue)
        return swigValues[i];
    throw new IllegalArgumentException("No enum " + promiseStatusAndFlags_t.class + " with value " + swigValue);
  }

  private promiseStatusAndFlags_t(String swigName) {
    this.swigName = swigName;
    this.swigValue = swigNext++;
  }

  private promiseStatusAndFlags_t(String swigName, int swigValue) {
    this.swigName = swigName;
    this.swigValue = swigValue;
    swigNext = swigValue+1;
  }

  private promiseStatusAndFlags_t(String swigName, promiseStatusAndFlags_t swigEnum) {
    this.swigName = swigName;
    this.swigValue = swigEnum.swigValue;
    swigNext = this.swigValue+1;
  }

  private static promiseStatusAndFlags_t[] swigValues = { PROMISE_INVALID, PROMISE_INFINITE, PROMISE_COMPLETE, PROMISE_DESTROY, PROMISE_DATA_AVAILABLE, PROMISE_EVENT, PROMISE_USER_EVENT, PROMISE_RESULT_ERROR, PROMISE_MEMORY_ALLOCATED, PROMISE_MEMORY_RELEASING, PROMISE_MEMORY_POST_RELEASED_ID, PROMISE_ALLOW_RECURSIVE_EVENTS, PROMISE_NO_STATUS, PROMISE_WAIT_STATUS, PROMISE_ERROR_UNDEFINED };
  private static int swigNext = 0;
  private final int swigValue;
  private final String swigName;
}

